/**
 * A fun√ß√£o principal tem um objeto global que receber√° uma instancia de outro.
 * Este outro ter√° um m√©todo em com√∫m use(). A diferen√ßa deste design pattern
 * para o polimorfismo √© que no caso do polimorfismo, a classe usar√° herdar√°
 * a outra estaticamente, j√° neste, a instancia da classe √© passada por
 * par√¢metro por meio de um m√©todo set e em seguida ela fica dispon√≠vel
 * para ser usada dentro de um m√©todo.
 * 
 * Percebe-se que neste caso n√£o tem heran√ßa de classes.
 */
const Player = function() {
  weapon = {}; // o recipiente para a instancia da outra classe

  const getWeapon = function() {
    return weapon;
  }

  const setWeapon = function(_weapon) {
    weapon = _weapon;
  }

  const attack = function() {
    weapon.use(); // esse m√©todo precisa estar presente na instancia da classe
  }

  return { // colocando os m√©todos p√∫blicos
    getWeapon,
    setWeapon,
    attack
  };
}

const Sword = function() {
  const use = function() { // este m√©todo √© necess√°rio
    console.log("Using Sword ‚öîÔ∏è");
  }

  return {
    use // colocando o m√©tdo p√∫blico
  };
}

const Knife = function() {
  const use = function() { // este m√©todo √© necess√°rio
    console.log("Using Knife üî™");
  }

  return {
    use // colocando o m√©tdo p√∫blico
  };
}

const player = new Player(); // instanciando um novo player

player.setWeapon(new Knife); // injetando a classe Knife dentro do objeto player

// player.setWeapon(new Sword);

player.attack(); // usando a Knife, caso fosse a Sword ele a usaria no lugar